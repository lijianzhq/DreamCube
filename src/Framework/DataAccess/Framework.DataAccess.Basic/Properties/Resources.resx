<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AsyncOperationsNotSupported" xml:space="preserve">
    <value>当前数据库({0})不支持异步操作</value>
  </data>
  <data name="DataSourceToken" xml:space="preserve">
    <value>server=,data source=</value>
    <comment>连接字符串的数据库名、数据库路径的标志</comment>
  </data>
  <data name="DbTypeMapperXmlFileName" xml:space="preserve">
    <value>DreamCube.Framework.DataAccess.Basic.DbTypeMapper.xml</value>
    <comment>//数据库类型与.NET类型的映射表</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="DreamCube_Framework_DataAccess_Basic_DbFactory" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\DreamCube.Framework.DataAccess.Basic.DBFactory.xml;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="ExceptionDbCommandParameterInvalidate" xml:space="preserve">
    <value>给定的命令参数不合法，命令类型必须是存储过程类型</value>
  </data>
  <data name="ExceptionItemsCountNotEqualValuesCount" xml:space="preserve">
    <value>传入的列名参数数组与列值参数数组个数不一致。</value>
  </data>
  <data name="ExceptionLoadDbFactoryConfig" xml:space="preserve">
    <value>加载数据库工厂配置文件失败.</value>
  </data>
  <data name="ExceptionMessageParameterMatchFailure" xml:space="preserve">
    <value>给命令提供的参数值的个数与命令的参数个数不一致</value>
  </data>
  <data name="ExceptionMessageUpdateDataSetArgumentFailure" xml:space="preserve">
    <value>更新DataSet参数失败</value>
  </data>
  <data name="ExceptionNotFoundFactoryRecord" xml:space="preserve">
    <value>在配置文件中，找不到工厂名为{0}的配置记录，无法创建工厂对象。</value>
  </data>
  <data name="ExceptionNotSetProviderName" xml:space="preserve">
    <value>指定的连接字符串没有配置providerName属性</value>
  </data>
  <data name="ExceptionNullOrEmptyString" xml:space="preserve">
    <value>指定的字符串不能为空或者为空串</value>
  </data>
  <data name="ExceptionTableNameArrayEmpty" xml:space="preserve">
    <value>传入的表名数组为空</value>
  </data>
  <data name="ExceptionTableNotFound" xml:space="preserve">
    <value>在数据库【{0}】无法找到表【{1}】</value>
  </data>
  <data name="PasswordToken" xml:space="preserve">
    <value>password=,pwd=</value>
    <comment>连接字符串的用户密码标志</comment>
  </data>
  <data name="SystemCreatedTableNameRoot" xml:space="preserve">
    <value>table</value>
    <comment>//加载Dataset时，数据源表名的前缀</comment>
  </data>
  <data name="UniquelyParamPartValue" xml:space="preserve">
    <value>__unique__</value>
    <comment>生成随机参数变量的时候，变量名格式为：{columnName}_UniquelyParamPartValue_随机字符串；所以此参数是一个固定分隔符</comment>
  </data>
  <data name="UserNameToken" xml:space="preserve">
    <value>user id=,uid=</value>
    <comment>连接字符串的用户名标志</comment>
  </data>
</root>