<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mini.Foundation.Basic</name>
    </assembly>
    <members>
        <member name="P:Mini.Foundation.Basic.CommonObj.ExecResult.OpResult">
            <summary>
            结果，true为操作成功；false为操作失败
            </summary>
        </member>
        <member name="P:Mini.Foundation.Basic.CommonObj.ExecResult.Message">
            <summary>
            返回给客户端的消息（通常可以是异常消息）
            </summary>
        </member>
        <member name="P:Mini.Foundation.Basic.CommonObj.ExecResult.OpData">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Mini.Foundation.Basic.CommonObj.Result`1">
            <summary>
            如果执行结果非success，获取value的时候，会抛出异常
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Mini.Foundation.Basic.CommonObj.Result2`1">
            <summary>
            如果执行结果非success，获取value的时候，不会抛出异常，而是返回默认值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Mini.Foundation.Basic.Converters.VersionConverter">
            <summary>
            版本和字符串之间的转换器
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Converters.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            重写基类方法，实现从字符串转换version对象的逻辑
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="E:Mini.Foundation.Basic.DllExceptionEvent.ExceptionEvent">
            <summary>
            异常回调的事件
            参数：
            in Assembly callingAssembly：调用的assembly
            in Type sourceType：发生异常的类型
            in Exception ex：异常对象
            out Boolean：如果返回true，则不再调用委托连注册的方法（这种方案避免了很多dll都注册了这个事件，一个异常被多个调用方处理）
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.ExceptionHelper.FormatException(System.Exception)">
            <summary>
            格式化异常
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Mini.Foundation.Basic.Utility.MyArgumentsHelper">
            <summary>
            参数帮助类
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyArgumentsHelper.ThrowsIfNull(System.Object,System.String)">
            <summary>
            value为空，抛出空异常
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentNullException">value为null</exception>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyArgumentsHelper.ThrowsIfIsInvisibleString(System.String,System.String)">
            <summary>
            net20,net35调用String.IsNullOrEmpty，其他类库调用String.IsNullOrWhiteSpace，如果为空，则抛出异常
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentNullException">value为null或者为empty，.NET4.0以上会判断空白字符串，.net2.0只会判断空串""</exception>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyArgumentsHelper.ThrowsIfNullOrEmpty(System.String,System.String)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentNullException">value为null或者为空串""</exception>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyArgumentsHelper.ThrowsIfNullOrNoRecord(System.Collections.ICollection,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <param name="parameterName"></param>
            <param name="messageTemplate">{0}=parameterName</param>
            <exception cref="T:System.ArgumentNullException">collection参数为null</exception>
            <exception cref="T:System.ArgumentException">collection.count==0</exception>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyArgumentsHelper.ThrowsIfFileNotExist(System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
            <param name="messageTemplate">{0}=value</param>
            <exception cref="T:System.ArgumentNullException">value参数为null或者为空白串</exception>
            <exception cref="T:System.IO.FileNotFoundException">value指定的文件不存在</exception>
        </member>
        <member name="T:Mini.Foundation.Basic.Utility.MyConvert">
            <summary>
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyConvert.ToInt32``1(``0,System.Int32)">
            <summary>
            把字符串转换为整型，如果转换失败，则返回默认值
            </summary>
            <param name="value"></param>
            <param name="defaultValue">转换失败返回值</param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyConvert.ChangeType``1(System.Object)">
            <summary>
            泛型版本
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyConvert.ChangeType(System.Object,System.Type)">
            <summary>
            转换类型
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyConvert.RegisterTypeConverter``2">
            <summary>
            向系统注册TypeConverter，当调用convert方法的时候，对应的类型转换器会自动被调用
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TC"></typeparam>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyDynamicObj.GetDynamicObj(System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            根据对象，创建 一个动态对象；返回一个键值对，键为对象的属性名，值为属性值
            </summary>
            <param name="o"></param>
            <param name="include">包含的属性</param>
            <param name="exclude">排除的属性</param>
            <returns></returns>
        </member>
        <member name="T:Mini.Foundation.Basic.Utility.MyEnumerable">
            <summary>
            对Enumerable的类的一些扩展方法
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyEnumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            判断一个集合中是否存在指定的项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyEnumerable.JoinEx``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean,System.Func{``0,System.String})">
            <summary>
            组合字符串数组并返回；
            要确保泛型T类型转换成字符串是有意义的
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="separatorStr"></param>
            <param name="validate">
            此参数表示：是否需要验证目标数组是否包含有指定的分隔符；
            通常情况下，都不希望目标数组包含了分隔符的；此参数默认为false
            </param>
            <returns></returns>
        </member>
        <member name="T:Mini.Foundation.Basic.Utility.MyStream">
            <summary>
            流的相关公共方法
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyStream.ReadToMemoryStream(System.IO.Stream)">
            <summary>
            把不可查找的流读取成内存流
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Mini.Foundation.Basic.Utility.MyString">
            <summary>
            字符串的相关方法
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyString.GetBetweenStr(System.String,System.String,System.String)">
            <summary>
            从给定的字符串，获取两个字符串之间的内容
            </summary>
            <param name="value"></param>
            <param name="startChar"></param>
            <param name="endChar"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyString.IsInvisibleString(System.String)">
            <summary>
            net20,net35调用String.IsNullOrEmpty，其他类库调用String.IsNullOrWhiteSpace
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyString.LastRightOf(System.String,System.String,System.Boolean,System.String)">
            <summary>
            取标志字符的右边部分（从最后开始匹配标志字符）
            </summary>
            <param name="target"></param>
            <param name="value">标志字符</param>
            <param name="ignoreCase">是否忽略大小写，默认为false，也就是默认是大小写敏感的</param>
            <param name="defaultValue">当target为NULL或者空串时，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyString.LastLeftOf(System.String,System.String,System.Boolean,System.String)">
            <summary>
            取标志字符的左边部分（从最后开始匹配标志字符）
            </summary>
            <param name="target"></param>
            <param name="value">标志字符</param>
            <param name="ignoreCase">是否忽略大小写，默认为false，也就是默认是大小写敏感的</param>
            <param name="defaultValue">获取不到的时候，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyString.LeftOf(System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            取标志字符的左边部分
            </summary>
            <param name="target"></param>
            <param name="value">标志字符</param>
            <param name="ignoreCase">是否忽略大小写，默认为false，也就是默认是大小写敏感的</param>
            <param name="defaultValue">获取失败的时候，返回的默认值</param>
            <param name="startCountIndex">
            起始计算位置（是计算位置，与最终获取的字符串没关系的）
            例如：ftp://ftpuser@127.0.0.1/a/b，要获取ftp://ftpuser@127.0.0.1/这个字符串，就可以通过这个参数去获取
            </param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyString.LeftOf(System.String,System.Int32)">
            <summary>
            获取左边Length长度的字符串
            </summary>
            <param name="target"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyString.RightOf(System.String,System.Int32)">
            <summary>
            获取右边Length长度的字符串
            </summary>
            <param name="target"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyString.RightOf(System.String,System.String,System.Boolean,System.String)">
            <summary>
            取标志字符的右边部分
            </summary>
            <param name="target"></param>
            <param name="value">标志字符</param>
            <param name="ignoreCase">是否忽略大小写，默认为false，也就是默认是大小写敏感的</param>
            <param name="defaultValue">获取失败返回的默认值</param>
            <returns></returns>
        </member>
        <member name="T:Mini.Foundation.Basic.Utility.MyUrl">
            <summary>
            url的帮助类
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyUrl.Combine(System.String,System.String)">
            <summary>
            组合两个Url片段，处理斜杠符号
            如果 part2以斜杠符号开始，则代表是相对根目录的路径;否则则代表是相对当前页面的路径
            </summary>
            <param name="part1"></param>
            <param name="part2"></param>
            <returns></returns>
        </member>
        <member name="T:Mini.Foundation.Basic.Utility.MyWebUtility">
            <summary>
            web开发遇到的一些常见的公共方法
            </summary>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyWebUtility.TryGetWebPageEncoding(System.Byte[],System.Text.Encoding@,System.Boolean)">
            <summary>
            根据网页的二进制数据，获取对应的编码（从网页的charset字符集去获取）
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <param name="doNotThrowException">转换编码失败的时候，不要抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyWebUtility.HtmlDecode(System.String)">
            <summary>
            html解码对于.NET20等旧版的调用HttpUtility.HtmlDecode进行解码；
            .net40后新版的调用WebUtility.HtmlDecode进行解码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyWebUtility.HasUrlEncode(System.String)">
            <summary>
            是否已经进行了urlencode
            UrlDecode一下，再UrlDecode一下，前后一致即未Encode过，前后不一致即Encode过。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyWebUtility.UrlDecode(System.String)">
            <summary>
            url解码
            </summary>
            <param name="encodedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mini.Foundation.Basic.Utility.MyWebUtility.UrlEncode(System.String,System.Boolean)">
            <summary>
            对文本进行UrlEncode（内部会判断是否经过了Encode的，所以可以多次调用此Encode方法都没关系）
            </summary>
            <param name="value"></param>
            <param name="doNotCheckHasEncode">是否判断是否已经encode过一次了，true：不判定；false：判断，如果已经encode一次了，不会再encode了</param>
            <returns></returns>
        </member>
    </members>
</doc>
