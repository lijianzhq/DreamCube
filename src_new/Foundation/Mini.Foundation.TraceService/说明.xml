<?xml version="1.0" encoding="utf-8" ?>

<!--参考以下的配置，在程序的主配置文件中增加响应的配置-->

<configuration>
  <system.diagnostics>
    <switches>
      <!--在程序中，你可以这样取得配置文件中日志的开关
      System.Diagnostics.TraceSwitch myTraceSwitch =
      new System.Diagnostics.TraceSwitch("traceSwitch", string.Empty);
      在程序中，你可以通过这个开关的设置来决定输出什么，配合开关的级别，在 Trace 中又提供了几个匹配的方法

      System.Diagnostics.Trace.TraceError("Error!!!"); 
      System.Diagnostics.Trace.TraceWarning("Warning!!!");
      当然，它们仅仅用来输出分类的日志，注意，判断是否输出是你的事情，所以，程序的代码往往如下：

      if( myTraceSwitch.TraceError) 
          System.Diagnostics.Trace.TraceError("Error!!!"); 
  
      if( myTraceSwitch.TraceWarning) 
          System.Diagnostics.Trace.TraceWarning("Warning!!!");
      -->
      <!--需要自己代码进行判断，直接调用trace方法是不会自动过滤的-->
      <!--0. 关闭，不希望输出日志
      1. 错误级别的日志
      2. 建议输出错误和警告级别的日志
      3. 一般信息的日志也输出
      4. 详细日志-->
      <!--注意：name值必须是traceSwitch不能改-->
      <add name="traceSwitch" value="4"/>
    </switches>
    <trace autoflush="true" indentsize ="4">
      <!--Debug 和 Trace 使用相同的监听器，默认情况下，在它们的监听器集合属性 Listeners 中，
          已经添加了一个 System.Diagnostics.DefaultTraceListener 的实例，以便输出到 Visual Studio 的 Output 窗口中，
          所以，在使用了日志之后，我们可以打开 Output 窗口来看看实际的输出。如果我们希望能够在控制台窗口中看到输出，
          那么只需要增加一个 ConsoleTraceListener 就可以了。-->
      <listeners>
        <!--记录到文件中，initializeData表示文件名-->
        <add name="TextWriterTraceListener"
          type="System.Diagnostics.TextWriterTraceListener"
          initializeData="trace.log" />
        <!--记录到windows系统日志中，initializeData表示系统日志的来源，应用程序自己应该重命名这个字段值，方便在windows系统日志中查看本程序记录的日志-->
        <add name="EventLogTraceListener"
            type="System.Diagnostics.EventLogTraceListener"
            initializeData="TraceListenerLog" />
        <!--输出到vs的output窗口-->
        <add name="DefaultTraceListener"
            type="System.Diagnostics.DefaultTraceListener" />
        <!--<remove name="Default" />-->
      </listeners>
    </trace>
  </system.diagnostics>
</configuration>